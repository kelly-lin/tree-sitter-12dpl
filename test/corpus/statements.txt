============================================
If statements
============================================

Integer main() {
  if (a)
    return 1;

  if (!a) {
    return 2;
  } else {
    return 3;
  }
}

---

(source_file
  (function_definition
    (primitive_type)
    (function_declarator (identifier) (parameter_list))
    (compound_statement
      (if_statement (parenthesized_expression (identifier))
        (return_statement (number_literal)))
      (if_statement (parenthesized_expression (unary_expression (identifier)))
        (compound_statement
          (return_statement (number_literal)))
        (compound_statement
          (return_statement (number_literal)))))))

============================================
For loops
============================================

Integer main() {
  for (Integer i = 0; i < 5; i++) {
    if (a) {
      continue;
    }
    return 2;
  }
}

---

(source_file
  (function_definition
    (primitive_type)
    (function_declarator (identifier) (parameter_list))
    (compound_statement
      (for_statement
        (declaration (primitive_type) (init_declarator (identifier) (number_literal)))
        (binary_expression (identifier) (number_literal))
        (update_expression (identifier))
        (compound_statement 
          (if_statement
            (parenthesized_expression (identifier))
            (compound_statement (continue_statement)))
          (return_statement (number_literal)))))))

============================================
While loops
============================================

Integer main() {
  while (x) {
    Print("hi");
  }
}

---

(source_file
  (function_definition
    (primitive_type)
    (function_declarator (identifier) (parameter_list))
    (compound_statement
      (while_statement (parenthesized_expression (identifier))
        (compound_statement 
          (expression_statement (call_expression
            (identifier)
            (argument_list (string_literal)))))))))

============================================
Return statements
============================================

void foo() {
  return;
  return a;
  return a, b;
}

---

(source_file
  (function_definition
    (primitive_type)
    (function_declarator (identifier) (parameter_list))
    (compound_statement
      (return_statement)
      (return_statement (identifier))
      (return_statement (comma_expression (identifier) (identifier))))))

============================================
Comments with asterisks
============================================

{
  /*************************
   * odd number of asterisks
   *************************/
  Integer a;

  /**************************
   * even number of asterisks
   **************************/
  Integer b;
}

---

(source_file
   (compound_statement
     (comment)
     (declaration (primitive_type) (identifier))
     (comment)
     (declaration (primitive_type) (identifier))))

============================================
Switch statements
============================================

void foo(Integer a) {
  switch (a) {
    Print("entered switch!");

    case 3:
    case 5:
      if (b) {
        c();
      }
      break;

    default:
      c();
      break;
  }
}

---

(source_file
  (function_definition
    (primitive_type)
    (function_declarator (identifier) (parameter_list
      (parameter_declaration (primitive_type) (identifier))))
    (compound_statement
      (switch_statement
        (parenthesized_expression (identifier))
        (compound_statement
          (expression_statement (call_expression (identifier) (argument_list (string_literal))))
          (case_statement (number_literal))
          (case_statement (number_literal)
            (if_statement
              (parenthesized_expression (identifier))
              (compound_statement (expression_statement (call_expression (identifier) (argument_list)))))
            (break_statement))
          (case_statement
            (expression_statement (call_expression (identifier) (argument_list)))
            (break_statement)))))))

============================================
Basic statements
============================================

{
  Integer a;
}

---

(source_file
  (compound_statement
    (declaration 
      (primitive_type)
      (identifier))))

============================================
Expression statements
============================================

{
  Print("hello");
}

---

(source_file 
  (compound_statement 
    (expression_statement 
      (call_expression
        (identifier) 
        (argument_list 
          (string_literal))))))
