============================================
Number literals
============================================

{
  Integer a = 1;
}

---

(source_file
  (compound_statement
    (declaration (primitive_type) (init_declarator (identifier) (number_literal)))))

============================================
Function calls
============================================

void main() {
  Print("hello\n");
}

---

(source_file
  (function_definition
    (primitive_type)
    (function_declarator (identifier) (parameter_list))
    (compound_statement
      (expression_statement (call_expression
        (identifier)
        (argument_list (string_literal (escape_sequence))))))))

============================================
String literals
============================================

void main() {
  "hello";
}

---

(source_file
  (function_definition
    (primitive_type)
    (function_declarator (identifier) (parameter_list))
    (compound_statement
      (expression_statement (string_literal)))))

============================================
Boolean operators
============================================

Integer main() {
  !x || !y && !z;
}

---

(source_file
  (function_definition
    (primitive_type)
    (function_declarator (identifier) (parameter_list))
    (compound_statement
      (expression_statement (binary_expression
        (unary_expression (identifier))
        (binary_expression
          (unary_expression (identifier))
          (unary_expression (identifier))))))))

============================================
Assignments
============================================

Integer main() {
  Integer a = 1;
  b = 2;
  h[i] = j;
  k += l;
  m -= o;
  n *= p;
  q /= r;
}

---

(source_file
  (function_definition
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (declaration
        type: (primitive_type)
        declarator: (init_declarator
          declarator: (identifier)
          value: (number_literal)))
      (expression_statement (assignment_expression
        left: (identifier)
        right: (number_literal)))
      (expression_statement (assignment_expression
        left: (subscript_expression
          argument: (identifier)
          index: (identifier))
        right: (identifier)))
      (expression_statement (assignment_expression
        left: (identifier)
        right: (identifier)))
      (expression_statement (assignment_expression
        left: (identifier)
        right: (identifier)))
      (expression_statement (assignment_expression
        left: (identifier)
        right: (identifier)))
      (expression_statement (assignment_expression
        left: (identifier)
        right: (identifier))))))
